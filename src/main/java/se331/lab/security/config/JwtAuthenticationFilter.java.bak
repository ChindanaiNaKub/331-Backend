package se331.lab.security.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import se331.lab.security.token.TokenRepository;
import se331.lab.security.token.TokenType;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

  private final JwtService jwtService;
  private final UserDetailsService userDetailsService;
  private final TokenRepository tokenRepository;

  @Override
  protected boolean shouldNotFilter(@NonNull HttpServletRequest request) throws ServletException {
    String path = request.getRequestURI();
    // Skip auth endpoints and public upload endpoints entirely
    if (path.startsWith("/api/v1/auth/")) {
      return true;
    }
    if ("/uploadImage".equals(path) || "/uploadFile".equals(path)) {
      return true;
    }
    // Always let CORS preflight through
    if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
      return true;
    }
    return false;
  }

  @Override
  protected void doFilterInternal(
      @NonNull HttpServletRequest request,
      @NonNull HttpServletResponse response,
      @NonNull FilterChain filterChain
  ) throws ServletException, IOException {
    // Always let CORS preflight through
    if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
      filterChain.doFilter(request, response);
      return;
    }
    // Allow public GET endpoints without requiring JWT auth
    String method = request.getMethod();
    String path = request.getServletPath();
    if ("GET".equalsIgnoreCase(method) && (
        path.startsWith("/events") ||
        path.startsWith("/event") ||
        path.startsWith("/api/v1/events") ||
        path.startsWith("/api/v1/event") ||
        path.startsWith("/organizations") ||
        path.startsWith("/api/v1/organizations") ||
        path.startsWith("/auction-items") ||
        path.startsWith("/api/v1/auction-items") ||
        path.startsWith("/students") ||
        path.startsWith("/api/v1/students") ||
        path.startsWith("/organizers") ||
        path.startsWith("/api/v1/organizers")
    )) {
      if (org.slf4j.LoggerFactory.getLogger(JwtAuthenticationFilter.class).isDebugEnabled()) {
        org.slf4j.LoggerFactory.getLogger(JwtAuthenticationFilter.class)
            .debug("Bypassing JWT filter for public GET path: {}", path);
      }
      filterChain.doFilter(request, response);
      return;
    }
    if (request.getServletPath().contains("/api/v1/auth")) {
      filterChain.doFilter(request, response);
      return;
    }
    
    // Allow upload endpoints without requiring JWT auth
    if (path.equals("/uploadImage") || path.equals("/uploadFile")) {
      filterChain.doFilter(request, response);
      return;
    }
    final String authHeader = request.getHeader("Authorization");
    final String jwt;
    final String userEmail;
    if (authHeader == null ||!authHeader.startsWith("Bearer ")) {
      filterChain.doFilter(request, response);
      return;
    }
    jwt = authHeader.substring(7);
    userEmail = jwtService.extractUsername(jwt);
    if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
      UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);
      boolean isTokenValid = tokenRepository.findByToken(jwt)
              .map(t -> !t.isExpired() && !t.isRevoked() && t.getTokenType() == TokenType.ACCESS)
              .orElse(false);
      if (jwtService.isTokenValid(jwt, userDetails) && isTokenValid) {
        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
            userDetails,
            null,
            userDetails.getAuthorities()
        );
        authToken.setDetails(
            new WebAuthenticationDetailsSource().buildDetails(request)
        );
        SecurityContextHolder.getContext().setAuthentication(authToken);
      }
    }
    filterChain.doFilter(request, response);
  }
}
